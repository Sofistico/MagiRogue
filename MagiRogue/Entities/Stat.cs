using MagiRogue.System;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MagiRogue.Entities
{
    public class Stat
    {
        #region Stats

        #region StatsFields

        private float health; // Will remove in favor of a limb like system
        private float maxHealth; // Will remove in favor of a limb like system
        private float _baseHpRegen;
        private float bloodyMana; // Is to be earned, the limit is soul + mind + body, a more potent form than natural mana
        private int naturalMana; // Mana generated by the body, Formula is soul + (mind*2) + body
        private int attack;
        private int attackChance;
        private int defense;
        private int defenseChance;
        private int bodyStat;
        private int mindStat;
        private int soulStat;
        private int godPower;
        private bool godly;
        private float bloodCount; // the amount of blood inside the actor, its in ml, to facilitate the calculus of blood volume, the formula is ml/kg
        private int size; // the size in meters of the actor
        private int weight; // the weight of the being in kg
        private int temperature; // the temperature of the creature, don't know if i will use or not
        private bool hasBlood;

        #endregion StatsFields

        #region StatsProperties

        /// <summary>
        /// current health
        /// </summary>
        public float Health
        {
            get { return health; }
            set { health = value; }
        }

        /// <summary>
        /// maximum health
        /// </summary>
        public float MaxHealth
        {
            get { return maxHealth; }
            set { maxHealth = value; }
        }

        public float BaseHpRegen
        {
            get { return _baseHpRegen; }
            set { _baseHpRegen = value; }
        }

        /// <summary>
        /// the limit is soul + mind + body, a more potent form than natural mana
        /// \nFor every 100 ml/kg of blood, creates 0,1 of blood mana
        /// </summary>
        public float BloodyMana
        {
            get { return bloodyMana; }
            set
            {
                if (value <= bodyStat + mindStat + soulStat)
                    bloodyMana = value;
                else
                    bloodyMana = bodyStat + mindStat + soulStat;
            }
        }

        /// <summary>
        /// attack strength
        /// </summary>
        public int Attack
        {
            get { return attack; }
            set
            {
                attack = bodyStat + value;
            }
        }

        /// <summary>
        /// percent chance of successful hit
        /// </summary>
        public int AttackChance
        {
            get { return attackChance; }
            set
            {
                attackChance = BodyStat + value;
            }
        }

        /// <summary>
        /// defensive strength
        /// </summary>
        public int Defense
        {
            get { return defense; }
            set { defense = value; }
        }

        /// <summary>
        /// percent chance of successfully blocking a hit
        /// </summary>
        public int DefenseChance
        {
            get { return defenseChance; }
            set { defenseChance = value; }
        }

        /// <summary>
        /// The body stat of the actor
        /// </summary>
        public int BodyStat
        {
            get { return bodyStat; }
            set { bodyStat = value; }
        }

        /// <summary>
        /// The mind stat of the actor
        /// </summary>
        public int MindStat
        {
            get { return mindStat; }
            set { mindStat = value; }
        }

        /// <summary>
        /// The soul stat of the actor
        /// </summary>
        public int SoulStat
        {
            get { return soulStat; }
            set { soulStat = value; }
        }

        /// <summary>
        /// The god stat of the actor, checks if the actor is a god as well
        /// </summary>
        public int GodPower
        {
            get { return godPower; }
            set
            {
                if (godly)
                {
                    godPower = value;
                }
                else
                {
                    godPower = 0;
                }
            }
        }

        // To do magic this value must be true, because magic and being a god are the same thing.
        public bool Godly
        {
            get { return godly; }
            set { godly = value; }
        }

        /// <summary>
        /// Formula is soul + (mind*2) + body, this is pure mana made inside the body, it difers from just mana because it's
        /// easier to work with and all beings can easily use it, if they train to do it.
        /// </summary>
        public int NaturalMana
        {
            get { return naturalMana; }
            set
            {
                if (value <= bodyStat + (mindStat * 2) + soulStat)
                    naturalMana = value;
                else
                    naturalMana = bodyStat + (mindStat * 2) + soulStat;
            }
        }

        /// <summary>
        /// It uses an aproximation of blood count equal to 75 ml/kg for an adult male
        /// </summary>
        public float BloodCount
        {
            get => bloodCount;
            set
            {
                if (value <= weight * 75)
                    bloodCount = value;
                else
                    return;
            }
        }

        /// <summary>
        /// The size of the actor in centimeters
        /// </summary>
        public int Size { get { return size; } set { size = value; } }
        /// <summary>
        /// The weight of the actor in kg
        /// </summary>
        public int Weight { get { return weight; } set { weight = value; } }
        /// <summary>
        /// The temperature of the actor in celsius
        /// </summary>
        public int Temperature { get { return temperature; } set { temperature = value; } }

        /// <summary>
        /// The view radius of the actor, for seeing things
        /// </summary>
        public int ViewRadius { get; set; }

        public bool HasBlood { get { return hasBlood; } set { hasBlood = value; } }

        public int Speed { get; set; }

        #endregion StatsProperties

        #endregion Stats

        #region Constructor

        public Stat()
        {
        }

        #endregion Constructor

        #region Methods

        protected void CalculateBlood()
        {
            if (hasBlood)
                bloodCount = Weight * 75;
        }

        public void SetAttributes(
            int viewRadius,
            float health,
            float maxHealth,
            float baseHpRegen,
            int bodyStat,
            int mindStat,
            int soulStat,
            int attack,
            int attackChance,
            int defense,
            int defenseChance,
            int godPower,
            int size,
            int weight,
            bool hasBlood = true,
            bool godly = false
            )
        {
            this.ViewRadius = viewRadius;
            this.Health = health;
            this.MaxHealth = maxHealth;
            this.BaseHpRegen = baseHpRegen;
            this.BodyStat = bodyStat;
            this.MindStat = mindStat;
            this.SoulStat = soulStat;
            this.Attack = attack;
            this.AttackChance = attackChance;
            this.Defense = defense;
            this.DefenseChance = defenseChance;
            this.Godly = godly;
            if (godly)
                this.GodPower = godPower;
            this.Size = size;
            this.Weight = weight;
            this.HasBlood = hasBlood;
            CalculateBlood();
        }

        public void SetAttributes(
           Actor actor,
           string name,
           int viewRadius,
           float health,
           float maxHealth,
           float baseHpRegen,
           int bodyStat,
           int mindStat,
           int soulStat,
           int attack,
           int attackChance,
           int defense,
           int defenseChance,
           int godPower,
           int size,
           int weight,
           int speed,
           bool hasBlood = true,
           bool godly = false
           )
        {
            actor.Name = name;
            this.ViewRadius = viewRadius;
            this.Health = health;
            this.MaxHealth = maxHealth;
            this.BaseHpRegen = baseHpRegen;
            this.BodyStat = bodyStat;
            this.MindStat = mindStat;
            this.SoulStat = soulStat;
            this.Attack = attack;
            this.AttackChance = attackChance;
            this.Defense = defense;
            this.DefenseChance = defenseChance;
            this.Godly = godly;
            if (godly)
                this.GodPower = godPower;
            this.Size = size;
            this.Weight = weight;
            this.HasBlood = hasBlood;
            this.Speed = speed;
            CalculateBlood();
        }

        #endregion Methods
    }
}